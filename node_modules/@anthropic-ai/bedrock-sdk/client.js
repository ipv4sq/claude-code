"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnthropicBedrock = void 0;
const Core = __importStar(require("@anthropic-ai/sdk/core"));
const Resources = __importStar(require("@anthropic-ai/sdk/resources/index"));
const auth_1 = require("./auth.js");
const streaming_1 = require("./streaming.js");
const DEFAULT_VERSION = 'bedrock-2023-05-31';
const MODEL_ENDPOINTS = new Set(['/v1/complete', '/v1/messages']);
/** API Client for interfacing with the Anthropic Bedrock API. */
class AnthropicBedrock extends Core.APIClient {
    /**
     * API Client for interfacing with the Anthropic Bedrock API.
     *
     * @param {string | null | undefined} [opts.awsSecretKey]
     * @param {string | null | undefined} [opts.awsAccessKey]
     * @param {string | undefined} [opts.awsRegion=process.env['AWS_REGION'] ?? us-east-1]
     * @param {string | null | undefined} [opts.awsSessionToken]
     * @param {string} [opts.baseURL=process.env['ANTHROPIC_BEDROCK_BASE_URL'] ?? https://bedrock-runtime.${this.awsRegion}.amazonaws.com] - Override the default base URL for the API.
     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('ANTHROPIC_BEDROCK_BASE_URL'), awsSecretKey = null, awsAccessKey = null, awsRegion = Core.readEnv('AWS_REGION') ?? 'us-east-1', awsSessionToken = null, ...opts } = {}) {
        const options = {
            awsSecretKey,
            awsAccessKey,
            awsRegion,
            awsSessionToken,
            ...opts,
            baseURL: baseURL || `https://bedrock-runtime.${awsRegion}.amazonaws.com`,
        };
        super({
            baseURL: options.baseURL,
            timeout: options.timeout ?? 600000 /* 10 minutes */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        this.messages = new Resources.Messages(this);
        this.completions = new Resources.Completions(this);
        this._options = options;
        this.awsSecretKey = awsSecretKey;
        this.awsAccessKey = awsAccessKey;
        this.awsRegion = awsRegion;
        this.awsSessionToken = awsSessionToken;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            ...this._options.defaultHeaders,
        };
    }
    async prepareRequest(request, { url, options }) {
        const regionName = this.awsRegion;
        if (!regionName) {
            throw new Error('Expected `awsRegion` option to be passed to the client or the `AWS_REGION` environment variable to be present');
        }
        const headers = await (0, auth_1.getAuthHeaders)(request, {
            url,
            regionName,
            awsAccessKey: this.awsAccessKey,
            awsSecretKey: this.awsSecretKey,
            awsSessionToken: this.awsSessionToken,
        });
        request.headers = { ...request.headers, ...headers };
    }
    buildRequest(options) {
        options.__streamClass = streaming_1.Stream;
        if (Core.isObj(options.body)) {
            if (!options.body['anthropic_version']) {
                options.body['anthropic_version'] = DEFAULT_VERSION;
            }
        }
        if (MODEL_ENDPOINTS.has(options.path) && options.method === 'post') {
            if (!Core.isObj(options.body)) {
                throw new Error('Expected request body to be an object for post /v1/messages');
            }
            const model = options.body['model'];
            options.body['model'] = undefined;
            const stream = options.body['stream'];
            options.body['stream'] = undefined;
            if (stream) {
                options.path = `/model/${model}/invoke-with-response-stream`;
            }
            else {
                options.path = `/model/${model}/invoke`;
            }
        }
        return super.buildRequest(options);
    }
}
exports.AnthropicBedrock = AnthropicBedrock;
//# sourceMappingURL=client.js.map