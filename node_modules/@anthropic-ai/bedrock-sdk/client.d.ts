/// <reference types="node" />
import * as Core from '@anthropic-ai/sdk/core';
import * as Resources from '@anthropic-ai/sdk/resources/index';
import * as API from '@anthropic-ai/sdk/index';
export type ClientOptions = Omit<API.ClientOptions, 'apiKey' | 'authToken'> & {
    awsSecretKey?: string | null | undefined;
    awsAccessKey?: string | null | undefined;
    /**
     * Defaults to process.env['AWS_REGION'].
     */
    awsRegion?: string | undefined;
    awsSessionToken?: string | null | undefined;
};
/** API Client for interfacing with the Anthropic Bedrock API. */
export declare class AnthropicBedrock extends Core.APIClient {
    awsSecretKey: string | null;
    awsAccessKey: string | null;
    awsRegion: string;
    awsSessionToken: string | null;
    private _options;
    /**
     * API Client for interfacing with the Anthropic Bedrock API.
     *
     * @param {string | null | undefined} [opts.awsSecretKey]
     * @param {string | null | undefined} [opts.awsAccessKey]
     * @param {string | undefined} [opts.awsRegion=process.env['AWS_REGION'] ?? us-east-1]
     * @param {string | null | undefined} [opts.awsSessionToken]
     * @param {string} [opts.baseURL=process.env['ANTHROPIC_BEDROCK_BASE_URL'] ?? https://bedrock-runtime.${this.awsRegion}.amazonaws.com] - Override the default base URL for the API.
     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL, awsSecretKey, awsAccessKey, awsRegion, awsSessionToken, ...opts }?: ClientOptions);
    messages: Resources.Messages;
    completions: Resources.Completions;
    protected defaultQuery(): Core.DefaultQuery | undefined;
    protected defaultHeaders(opts: Core.FinalRequestOptions): Core.Headers;
    protected prepareRequest(request: RequestInit, { url, options }: {
        url: string;
        options: Core.FinalRequestOptions;
    }): Promise<void>;
    buildRequest(options: Core.FinalRequestOptions<unknown>): {
        req: RequestInit;
        url: string;
        timeout: number;
    };
}
//# sourceMappingURL=client.d.ts.map